import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.Map.Entry;

public class WordCounts {

	public static void main(String[] args) throws IOException {
		WordCounts wordCounts = new WordCounts();
		Map<String, Integer> wordMap = wordCounts.getWordCount();
		List<Entry<String, Integer>> list = wordCounts.sortByValue(wordMap);
		for(Map.Entry<String, Integer> entry:list){
			System.out.println(entry.getKey()+"  =  "+entry.getValue());
		}

	}
	
	public List<Entry<String, Integer>> sortByValue(Map<String, Integer> wordMap){

		Set<Entry<String, Integer>> set = wordMap.entrySet();
		List<Entry<String, Integer>> list = new ArrayList<Entry<String, Integer>>(set);
		Collections.sort( list, new Comparator<Map.Entry<String, Integer>>()
				{
			public int compare( Map.Entry<String, Integer> o1, Map.Entry<String, Integer> o2 )
			{
				return (o2.getValue()).compareTo( o1.getValue() );
			}
				} );
		return list;
	}
	
	public Map<String, Integer> getWordCount(){
		String file_dir = "file destination";
		File directory = new File(file_dir);
		File[] files = directory.listFiles();
		Map<String, Integer> wordMap = new HashMap<String, Integer>();

		for (File file : files) {
			if(file.isFile()) {
				BufferedReader inputStream = null;

				try {
					inputStream = new BufferedReader(new FileReader(file));
					String line;

					while((line = inputStream.readLine()) != null){
						StringTokenizer st = new StringTokenizer(line, " ");
						while(st.hasMoreTokens()){
							String tmp = st.nextToken().toLowerCase();
							if(wordMap.containsKey(tmp)){
								wordMap.put(tmp, wordMap.get(tmp)+1);
							} else {
								wordMap.put(tmp, 1);
							}
						}
					}
				} catch (FileNotFoundException e) {
					e.printStackTrace();
				} catch (IOException e) {
					e.printStackTrace();
				} finally{
					try {
						if(inputStream != null) 
							inputStream.close();
						} catch(Exception ex) {
					}
				}
			}
		}
		return wordMap;

	}
}
